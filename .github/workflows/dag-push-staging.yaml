name: Build Packages Staging using dag

on:
  workflow_dispatch:
  pull_request:
    branches:
      - main
  push:
    branches:
      - dag

jobs:
  build:
    name: Build stage1 packages using dag
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    env:
      PROJECT: staging-images-183e
      CLUSTER_NAME: tmp-cluster
      CLUSTER_ZONE: us-central1-b

    steps:
      # Checkout and build dag from main
      # Can't `go install` because its go.mod has `replace`s.
      - uses: actions/setup-go@v3
        with:
          go-version: '>=1.19.0'
      - uses: actions/checkout@v3
        with:
          repository: wolfi-dev/dag
          path: ${{github.workspace}}/dag
      - working-directory: ${{github.workspace}}/dag
        run: go install

      - uses: google-github-actions/auth@v0
        with:
          workload_identity_provider: "projects/567187841907/locations/global/workloadIdentityPools/staging-shared-9bd2/providers/staging-shared-gha"
          service_account: "staging-images-ci@staging-images-183e.iam.gserviceaccount.com"
      - uses: google-github-actions/setup-gcloud@v0
        with:
          project_id: ${{env.PROJECT}}
      - run: gcloud auth configure-docker --quiet

      - name: Setup Build Cluster
        working-directory: ${{github.workspace}}/dag
        run: |
          # Get our current public IP
          me=$(printf "%s/32" "$(curl -s https://api.ipify.org)")

          gcloud container clusters create "${CLUSTER_NAME}" \
            --enable-ip-alias \
            --network                       projects/staging-shared-7864/global/networks/staging-shared-a6474a3 \
            --subnetwork                    projects/staging-shared-7864/regions/us-central1/subnetworks/staging-shared-imgs-us-c1-209d340 \
            --cluster-secondary-range-name  gke-a-pods \
            --services-secondary-range-name gke-a-svcs \
            --tags                          "egress-inet" \
            --enable-dataplane-v2 \
            --enable-intra-node-visibility \
            --enable-master-authorized-networks \
            --master-authorized-networks="${me}" \
            --service-account staging-images-ci@staging-images-183e.iam.gserviceaccount.com \
            --zone            "${CLUSTER_ZONE}" \
            --release-channel rapid \
            --workload-pool   "${PROJECT}.svc.id.goog" \
            --machine-type    e2-standard-32 \
            --num-nodes       1

          gcloud container node-pools create arm-nodes \
            --cluster        "${CLUSTER_NAME}" \
            --zone           "${CLUSTER_ZONE}" \
            --tags           "egress-inet" \
            --service-account staging-images-ci@staging-images-183e.iam.gserviceaccount.com \
            --machine-type   t2a-standard-32 \
            --num-nodes      1

          ./scripts/setup-cluster.sh staging-images-ci

      - uses: 'google-github-actions/get-gke-credentials@v0'
        with:
          cluster_name: ${{ env.CLUSTER_NAME }}
          location: ${{ env.CLUSTER_ZONE }}

      - uses: actions/checkout@v3
        with:
          repository: wolfi-dev/bootstrap-stage1
          path: ${{github.workspace}}/bootstrap-stage1

      # NB: These publish to a separate path in the staging bucket until they're ready.
      - working-directory: ${{github.workspace}}/bootstrap-stage1
        run: |
          dag pod \
            --cpu=30 --ram=100Gi \
            --bucket=wolfi-dag-test-bucket/dag-test/bootstrap/stage1 \
            --secret-key
      - working-directory: ${{github.workspace}}/bootstrap-stage1
        run: |
          dag pod \
            --cpu=30 --ram=100Gi \
            --bucket=wolfi-dag-test-bucket/dag-test/bootstrap/stage1 \
            --secret-key \
            --arch=arm64

      - name: Collect diagnostics
        if: ${{ failure() }}
        run: |
          resources="pods daemonsets serviceaccounts namespaces"
          for ns in $(kubectl get ns -oname | cut -d'/' -f 2); do
            for resource in ${resources}; do
              echo --- $ns $resource ---
              kubectl get $resource -n${ns}
              for x in $(kubectl get $resource -n${ns} -oname || true); do
                echo "::group:: describe $resource $x"
                # Don't fail if the resource disappears midway.
                kubectl describe -n${ns} $x || true
                echo '::endgroup::'
              done
            done
          done

      - name: Teardown Build Cluster
        if: ${{ always() }}
        run: |
          gcloud container clusters delete "${CLUSTER_NAME}" \
            --zone "${CLUSTER_ZONE}" \
            --quiet
